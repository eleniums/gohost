// Code generated by protoc-gen-go. DO NOT EDIT.
// source: proto/test.proto

/*
Package test is a generated protocol buffer package.

It is generated from these files:
	proto/test.proto

It has these top-level messages:
	SendRequest
	LargeRequest
	TestResponse
	EchoResponse
*/
package test

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Send request.
type SendRequest struct {
	// Value to send.
	Value string `protobuf:"bytes,1,opt,name=value" json:"value,omitempty"`
}

func (m *SendRequest) Reset()                    { *m = SendRequest{} }
func (m *SendRequest) String() string            { return proto.CompactTextString(m) }
func (*SendRequest) ProtoMessage()               {}
func (*SendRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *SendRequest) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

// Large request.
type LargeRequest struct {
	// Length of string to return in response.
	Length int64 `protobuf:"varint,1,opt,name=length" json:"length,omitempty"`
}

func (m *LargeRequest) Reset()                    { *m = LargeRequest{} }
func (m *LargeRequest) String() string            { return proto.CompactTextString(m) }
func (*LargeRequest) ProtoMessage()               {}
func (*LargeRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *LargeRequest) GetLength() int64 {
	if m != nil {
		return m.Length
	}
	return 0
}

// Test response.
type TestResponse struct {
	// True if operation was a success.
	Success bool `protobuf:"varint,1,opt,name=success" json:"success,omitempty"`
}

func (m *TestResponse) Reset()                    { *m = TestResponse{} }
func (m *TestResponse) String() string            { return proto.CompactTextString(m) }
func (*TestResponse) ProtoMessage()               {}
func (*TestResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *TestResponse) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

// Echo response.
type EchoResponse struct {
	// Echo from service.
	Echo string `protobuf:"bytes,1,opt,name=echo" json:"echo,omitempty"`
}

func (m *EchoResponse) Reset()                    { *m = EchoResponse{} }
func (m *EchoResponse) String() string            { return proto.CompactTextString(m) }
func (*EchoResponse) ProtoMessage()               {}
func (*EchoResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *EchoResponse) GetEcho() string {
	if m != nil {
		return m.Echo
	}
	return ""
}

func init() {
	proto.RegisterType((*SendRequest)(nil), "test.SendRequest")
	proto.RegisterType((*LargeRequest)(nil), "test.LargeRequest")
	proto.RegisterType((*TestResponse)(nil), "test.TestResponse")
	proto.RegisterType((*EchoResponse)(nil), "test.EchoResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for TestService service

type TestServiceClient interface {
	// Echo the value in the request back in the response.
	Echo(ctx context.Context, in *SendRequest, opts ...grpc.CallOption) (*EchoResponse, error)
	// Send the value in the request.
	Send(ctx context.Context, in *SendRequest, opts ...grpc.CallOption) (*TestResponse, error)
	// Large will return a large response message.
	Large(ctx context.Context, in *LargeRequest, opts ...grpc.CallOption) (*EchoResponse, error)
	// Stream a bunch of requests.
	Stream(ctx context.Context, opts ...grpc.CallOption) (TestService_StreamClient, error)
}

type testServiceClient struct {
	cc *grpc.ClientConn
}

func NewTestServiceClient(cc *grpc.ClientConn) TestServiceClient {
	return &testServiceClient{cc}
}

func (c *testServiceClient) Echo(ctx context.Context, in *SendRequest, opts ...grpc.CallOption) (*EchoResponse, error) {
	out := new(EchoResponse)
	err := grpc.Invoke(ctx, "/test.TestService/Echo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testServiceClient) Send(ctx context.Context, in *SendRequest, opts ...grpc.CallOption) (*TestResponse, error) {
	out := new(TestResponse)
	err := grpc.Invoke(ctx, "/test.TestService/Send", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testServiceClient) Large(ctx context.Context, in *LargeRequest, opts ...grpc.CallOption) (*EchoResponse, error) {
	out := new(EchoResponse)
	err := grpc.Invoke(ctx, "/test.TestService/Large", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testServiceClient) Stream(ctx context.Context, opts ...grpc.CallOption) (TestService_StreamClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_TestService_serviceDesc.Streams[0], c.cc, "/test.TestService/Stream", opts...)
	if err != nil {
		return nil, err
	}
	x := &testServiceStreamClient{stream}
	return x, nil
}

type TestService_StreamClient interface {
	Send(*SendRequest) error
	CloseAndRecv() (*TestResponse, error)
	grpc.ClientStream
}

type testServiceStreamClient struct {
	grpc.ClientStream
}

func (x *testServiceStreamClient) Send(m *SendRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *testServiceStreamClient) CloseAndRecv() (*TestResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(TestResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for TestService service

type TestServiceServer interface {
	// Echo the value in the request back in the response.
	Echo(context.Context, *SendRequest) (*EchoResponse, error)
	// Send the value in the request.
	Send(context.Context, *SendRequest) (*TestResponse, error)
	// Large will return a large response message.
	Large(context.Context, *LargeRequest) (*EchoResponse, error)
	// Stream a bunch of requests.
	Stream(TestService_StreamServer) error
}

func RegisterTestServiceServer(s *grpc.Server, srv TestServiceServer) {
	s.RegisterService(&_TestService_serviceDesc, srv)
}

func _TestService_Echo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestServiceServer).Echo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/test.TestService/Echo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestServiceServer).Echo(ctx, req.(*SendRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestService_Send_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestServiceServer).Send(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/test.TestService/Send",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestServiceServer).Send(ctx, req.(*SendRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestService_Large_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LargeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestServiceServer).Large(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/test.TestService/Large",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestServiceServer).Large(ctx, req.(*LargeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestService_Stream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TestServiceServer).Stream(&testServiceStreamServer{stream})
}

type TestService_StreamServer interface {
	SendAndClose(*TestResponse) error
	Recv() (*SendRequest, error)
	grpc.ServerStream
}

type testServiceStreamServer struct {
	grpc.ServerStream
}

func (x *testServiceStreamServer) SendAndClose(m *TestResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *testServiceStreamServer) Recv() (*SendRequest, error) {
	m := new(SendRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _TestService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "test.TestService",
	HandlerType: (*TestServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Echo",
			Handler:    _TestService_Echo_Handler,
		},
		{
			MethodName: "Send",
			Handler:    _TestService_Send_Handler,
		},
		{
			MethodName: "Large",
			Handler:    _TestService_Large_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Stream",
			Handler:       _TestService_Stream_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "proto/test.proto",
}

func init() { proto.RegisterFile("proto/test.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 284 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x91, 0x41, 0x4a, 0xc3, 0x40,
	0x14, 0x86, 0x6d, 0x4d, 0x63, 0xfb, 0x92, 0x45, 0x3b, 0x88, 0x94, 0xe2, 0x42, 0x46, 0x90, 0xac,
	0x1a, 0xb4, 0x07, 0x10, 0x04, 0x77, 0xae, 0x12, 0x2f, 0x30, 0xc6, 0x47, 0x12, 0x88, 0x33, 0x31,
	0x6f, 0x92, 0x03, 0xb8, 0x72, 0xef, 0xd1, 0xbc, 0x82, 0x07, 0x91, 0x79, 0x49, 0x24, 0x0b, 0x11,
	0x77, 0xef, 0x1f, 0xfe, 0xff, 0x9b, 0x7f, 0xde, 0xc0, 0xba, 0x6e, 0x8c, 0x35, 0xb1, 0x45, 0xb2,
	0x7b, 0x1e, 0x85, 0xe7, 0xe6, 0xdd, 0x79, 0x6e, 0x4c, 0x5e, 0x61, 0xac, 0xea, 0x32, 0x56, 0x5a,
	0x1b, 0xab, 0x6c, 0x69, 0x34, 0xf5, 0x1e, 0x79, 0x09, 0x41, 0x8a, 0xfa, 0x39, 0xc1, 0xd7, 0x16,
	0xc9, 0x8a, 0x53, 0x58, 0x74, 0xaa, 0x6a, 0x71, 0x3b, 0xbb, 0x98, 0x45, 0xab, 0xa4, 0x17, 0xf2,
	0x0a, 0xc2, 0x07, 0xd5, 0xe4, 0x38, 0xba, 0xce, 0xc0, 0xaf, 0x50, 0xe7, 0xb6, 0x60, 0xdb, 0x71,
	0x32, 0x28, 0x19, 0x41, 0xf8, 0x88, 0x64, 0x13, 0xa4, 0xda, 0x68, 0x42, 0xb1, 0x85, 0x13, 0x6a,
	0xb3, 0x0c, 0x89, 0xd8, 0xb8, 0x4c, 0x46, 0x29, 0x25, 0x84, 0xf7, 0x59, 0x61, 0x7e, 0x9c, 0x02,
	0x3c, 0xcc, 0x0a, 0x33, 0x5c, 0xcb, 0xf3, 0xcd, 0xfb, 0x1c, 0x02, 0x87, 0x4b, 0xb1, 0xe9, 0xca,
	0x0c, 0xc5, 0x2d, 0x78, 0x2e, 0x23, 0x36, 0x7b, 0x7e, 0xe3, 0xa4, 0xf6, 0x4e, 0xf4, 0x47, 0x53,
	0xa4, 0x5c, 0xbf, 0x7d, 0x7e, 0x7d, 0xcc, 0x41, 0x2c, 0xe3, 0xee, 0x3a, 0x76, 0x40, 0x07, 0x70,
	0xa1, 0x3f, 0x00, 0xd3, 0xf6, 0x23, 0x40, 0x32, 0x80, 0x5c, 0xf0, 0x0e, 0x16, 0xbc, 0x07, 0x31,
	0xd8, 0xa7, 0x4b, 0xf9, 0xb5, 0xc3, 0x86, 0x11, 0x81, 0x58, 0x39, 0x44, 0xc5, 0xd1, 0x03, 0xf8,
	0xa9, 0x6d, 0x50, 0xbd, 0xfc, 0xb7, 0xc6, 0x51, 0x34, 0x7b, 0xf2, 0xf9, 0xb3, 0x0e, 0xdf, 0x01,
	0x00, 0x00, 0xff, 0xff, 0x00, 0xa9, 0xf5, 0x87, 0xe4, 0x01, 0x00, 0x00,
}
